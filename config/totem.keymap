//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
       
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

#define BSE 0
#define LWR 1
#define RSE 2
#define ADJ 3
#define SYM 4
#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1500  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 5     // 10

// mouse movement

&mmv {
    acceleration-exponent = <1>;      // 1
    time-to-max-speed-ms = <500>;     // 300
    delay-ms = <0>;                   // 0
};

&mt {
    flavor = "tap-preferred";
    tapping-term-ms = <200>;
    quick-tap-ms = <170>;
    require-prior-idle-ms = <30>;
};

&lt {
    quick-tap-ms = <250>; // This allows the tapped key to be repeated.
    tapping-term-ms = <250>;
    flavor = "tap-preferred";
    require-prior-idle-ms = <125>;
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_backslash {
            bindings = <&kp BACKSLASH>;
            key-positions = <29 28>;
            timeout-ms = <50>;
        };

        combo_esc {
            bindings = <&kp ESC>;
            key-positions = <0 1>;
            timeout-ms = <50>;
        };

        combo_minus {
            bindings = <&kp MINUS>;
            key-positions = <20 21>;
            timeout-ms = <50>;
        };

        combo_quote {
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <18 19>;
            timeout-ms = <50>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        bse_layer {
            bindings = <
        &kp Q             &kp W        &kp E           &kp R           &kp T            &kp Y        &kp U            &kp I            &kp O                &kp P
        &mt LEFT_SHIFT A  &mt LCTRL S  &mt LEFT_GUI D  &mt LEFT_ALT F  &kp G            &kp H        &mt RIGHT_ALT J  &mt RIGHT_GUI K  &mt RIGHT_CONTROL L  &mt RIGHT_SHIFT SEMICOLON
&kp LEFT_PARENTHESIS      &kp Z        &kp X           &kp C           &kp V            &kp B        &kp N            &kp M            &kp COMMA            &kp DOT     &kp FSLH        &kp RIGHT_PARENTHESIS        
                                       &lt 3 ESC       &lt 3 TAB       &lt 2 BACKSPACE  &lt 1 SPACE  &lt 4 DELETE     &lt 4 BACKSLASH
            >;

        };


        lwr_layer {
            bindings = <
        &kp C_NEXT        &kp LS(LC(LEFT))  &kp LS(HOME)    &kp LS(END)   &kp LC(LS(RIGHT))  &kp HOME        &kp PAGE_DOWN   &kp PG_UP     &kp END          &mkp MB3
        &kp C_PLAY_PAUSE  &msc SCRL_LEFT    &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_RIGHT    &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW  &mkp MB1
&trans  &kp C_PREVIOUS    &kp LC(X)         &kp LC(C)       &kp LC(V)     &trans       &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &mkp MB2      &trans
                                        &trans        &kp ESCAPE    &kp ENTER          &trans   &trans   &trans
            >;

        };


        rse_layer {
            bindings = <
        &kp EXCLAMATION  &kp AT_SIGN  &kp HASH  &kp DOLLAR  &kp PERCENT  &kp CARET  &kp AMPERSAND  &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
        &kp N1           &kp N2       &kp N3    &kp N4      &kp N5       &kp N6     &kp N7         &kp N8        &kp N9                &kp N0
&trans  &kp F1           &kp F2       &kp F3    &kp F4      &kp F5       &kp F6     &kp F7         &kp F8        &kp F9                &kp F10    &trans
                                &trans  &kp F11 &trans      &kp ENTER    &kp F12        &trans
            >;
        };


        adj_layer {
            bindings = <
        &bt BT_CLR_ALL  &bt BT_CLR  &out OUT_TOG  &bl BL_TOG  &kp KP_NUMLOCK &kp KP_MINUS     &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp KP_SLASH
        &bootloader     &bt BT_NXT  &bt BT_SEL 0  &bl BL_INC  &trans         &kp KP_NUMBER_0  &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp KP_DOT
&trans  &trans          &bt BT_PRV  &bt BT_SEL 1  &bl BL_DEC  &trans         &kp KP_PLUS      &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp KP_ASTERISK  &trans
                                          &trans        &kp TAB      &kp BACKSPACE      &kp SPACE        &kp KP_ENTER   &kp KP_BACKSLASH
            >;
        };


        sym_layer {
            bindings = <
        &kp LEFT_BRACKET  &kp LEFT_BRACE  &trans  &trans   &trans         &trans     &trans  &trans  &kp RIGHT_BRACE    &kp RIGHT_BRACKET
        &kp GRAVE         &trans          &trans  &trans   &trans         &trans     &trans  &trans  &trans             &kp SINGLE_QUOTE
&trans  &kp MINUS         &trans          &trans  &trans   &trans         &trans     &trans  &trans  &trans             &kp EQUAL       &trans
                                &kp ESC    &kp TAB  &kp BACKSPACE  &kp SPACE  &kp DELETE    &trans
            >;
        };
    };
};